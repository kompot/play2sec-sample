play2sec-mail {
  from {
    # Mailing from address
    email="kompotik+play2sec@gmail.com"

    # Mailing name
    name="play2sec.mooo.com"

    # Seconds between sending mail through Akka
    delay=1
  }
}

play2sec {
	# The user will get redirected here if no original URL was saved before
	# starting the auth process and your resolver returns null for afterAuth()
	afterAuthFallback="/"
	afterLogoutFallback="/"

	# If set to true, account merging is enabled, if set to false its disabled
	# and accounts will never prompted to be merged
	# defaults to true
	accountMergeEnabled=true

	# if this is set to true, accounts are automatically merged
	# (e.g. if a user is logged in and uses an authentication provider
	# which has already been registered to another user prior to logging out,
	# those two users are merged.
	#
	# If set to false, your resolver must not return null for askMerge()
	# defaults to false
	accountAutoMerge=true

	# if this is set to true, accounts are automatically linked
	# (e.g. if a user is logged in and uses a different authentication provider
	# which has NOT yet been registered to another user, this newly used authentication
	# provider gets added to the current local user
	#
	# If set to false, your resolver must not return null for askLink()
	# defaults to false
	accountAutoLink=true

  # Settings for the password-based authentication provider
  # if you are not using it, you can remove this portion of the config file
  email {
    mail {
      verificationLink {
        # Whether the verification link will be HTTPS
        secure=false
      }
      passwordResetLink {
        # Whether the password reset link will be HTTPS
        secure=false
      }
      from {
        # Mailing from address
        email="kompotik+play2sec@gmail.com"

        # Mailing name
        name="play2sec.mooo.com"
      }

      # Pause between email jobs (in seconds)
      delay=1
    }
    # Whether to directly log in after the password reset (true)
    # or send the user to the login page (false)
    loginAfterPasswordReset=true
  }

  # Settings for the foursquare-based authentication provider
  # if you are not using it, you can remove this portion of the config file
  # and remove the Foursquare provider from conf/play.plugins
  foursquare {
    redirectUri {
      # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
      secure=false

      # You can use this setting to override the automatic detection
      # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
      # host=play2sec.mooo.com
    }
    authorizationUrl="https://foursquare.com/oauth2/authorize"
    accessTokenUrl="https://foursquare.com/oauth2/access_token"
    userInfoUrl="https://api.foursquare.com/v2/users/self"

    # Foursquare credentials
    # These are mandatory for using OAuth and need to be provided by you,
    # if you want to use foursquare as an authentication provider.
    # Get the credentials here: https://de.foursquare.com/oauth/
    # Remove leading '#' after entering
    # clientId=
    # clientSecret=
  }

  # Settings for the facebook-based authentication provider
  # if you are not using it, you can remove this portion of the config file
  # and remove the facebook provider from conf/play.plugins
  facebook {
    redirectUri {
      # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
      secure=false

      # You can use this setting to override the automatic detection
      # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
      # host=yourdomain.com
    }
    authorizationUrl="https://graph.facebook.com/oauth/authorize"
    accessTokenUrl="https://graph.facebook.com/oauth/access_token"
    userInfoUrl="https://graph.facebook.com/me"
    scope=email

    # Facebook credentials
    # These are mandatory for using OAuth and need to be provided by you,
    # if you want to use facebook as an authentication provider.
    # Get them here: https://developers.facebook.com/apps
    # Remove leading '#' after entering
    # clientId=
    # clientSecret=
  }

  # Settings for the twitter-based authentication provider
  # if you are not using it, you can remove this portion of the config file
  # and remove the Twitter provider from conf/play.plugins
  twitter {
    redirectUri {
      # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
      secure=false

      # You can use this setting to override the automatic detection
      # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
      # host=play2sec.mooo.com
    }
    requestTokenUrl="https://api.twitter.com/oauth/request_token"
    accessTokenUrl="https://api.twitter.com/oauth/access_token"
    authorizationUrl="https://api.twitter.com/oauth/authenticate"
    userInfoUrl="https://api.twitter.com/1.1/account/verify_credentials.json"

    # Get the credentials here: https://dev.twitter.com/docs/auth/oauth
    # Remove leading '#' after entering
    # consumerKey=
    # consumerSecret=
  }

  # Settings for the google-based authentication provider
  # if you are not using it, you can remove this portion of the config file
  # and remove the Google provider from conf/play.plugins
  google {
    redirectUri {
      # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
      secure=false

      # You can use this setting to override the automatic detection
      # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
      # host=play2sec.mooo.com
    }
    authorizationUrl="https://accounts.google.com/o/oauth2/auth"
    accessTokenUrl="https://accounts.google.com/o/oauth2/token"
    userInfoUrl="https://www.googleapis.com/oauth2/v1/userinfo"
    scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"

    # Google credentials
    # These are mandatory for using OAuth and need to be provided by you,
    # if you want to use Google as an authentication provider.
    # Get them here: https://cloud.google.com/console
    # Remove leading '#' after entering
    # clientId=
    # clientSecret=
  }

  vkontakte {
    redirectUri {
      # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
      secure=false
    }
    authorizationUrl="https://oauth.vk.com/authorize"
    accessTokenUrl="https://oauth.vk.com/access_token"
    userInfoUrl="https://api.vkontakte.ru/method/getProfiles"
    # http://vk.com/developers.php?oid=-1&p=%D0%9F%D1%80%D0%B0%D0%B2%D0%B0_%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%B0_%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9
    scope=""

    # Get the credentials here: https://code.google.com/apis/console
    # Remove leading '#' after entering:
    # clientId=
    # clientSecret=
  }

  # Settings for the OpenID-based authentication provider
  # if you are not using it, you can remove this portion of the config file
  # and remove the OpenID provider from conf/play.plugins
  openid {
    redirectUri {
      # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
      secure=false

      # You can use this setting to override the automatic detection
      # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
      # host=play2sec.mooo.com
    }

    attributes {
      required {
        email="http://schema.openid.net/contact/email"
      }

      optional {
        country="http://axschema.org/contact/country/home"
        firstname="http://axschema.org/namePerson/first"
        language="http://axschema.org/pref/language"
        lastname="http://axschema.org/namePerson/last"
      }
    }
  }
}
